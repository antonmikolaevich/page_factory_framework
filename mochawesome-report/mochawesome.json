{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-21T08:27:12.306Z",
    "end": "2022-11-21T08:27:16.388Z",
    "duration": 4082,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c5f8559b-8e79-4454-8311-04b7046fc9db",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
          "title": "CRUD positive scenarios",
          "fullFile": "D:\\JS Mentoring Program Mentee\\Mikhail_Lazko_Automation_Program_Basic\\specs\\test.spec.js",
          "file": "\\specs\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should Create a new post",
              "fullTitle": "CRUD positive scenarios should Create a new post",
              "timedOut": false,
              "duration": 615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums\", albumsData, \"post\" );\nexpect(response.data.title).to.equal(albumsData.title);\nexpect(response.data.userId).to.equal(albumsData.userId);\nexpect(response.status).to.equal(201);",
              "err": {},
              "uuid": "1da2477a-17f5-47b0-ac50-2aabb0872785",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should Get list all albums",
              "fullTitle": "CRUD positive scenarios should Get list all albums",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums\");\nexpect(response.data).to.have.lengthOf(100);",
              "err": {},
              "uuid": "bbd0fb3b-bac0-4975-a1b9-b5118b8a84f7",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should Get an album",
              "fullTitle": "CRUD positive scenarios should Get an album",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/1\");\nexpect(response.data.id).to.equal(1);",
              "err": {},
              "uuid": "358836c3-4375-42e4-b4b3-dbeca4fabded",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter albums by userId",
              "fullTitle": "CRUD positive scenarios should filter albums by userId",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/?userId=1\");\nexpect(response.data.every(el => el.userId == 1)).to.equal(true);",
              "err": {},
              "uuid": "1c9d6967-f0e2-4221-81d0-24b77659fb8a",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update album data",
              "fullTitle": "CRUD positive scenarios should update album data",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/2\", albumsData, \"put\" );\nexpect(response.status).to.equal(200);\nexpect(response.data.title).to.equal(albumsData.title);\nexpect(response.data.userId).to.equal(albumsData.userId);",
              "err": {},
              "uuid": "73df787c-8470-4879-9cb0-b689bfd874a8",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an album",
              "fullTitle": "CRUD positive scenarios should delete an album",
              "timedOut": false,
              "duration": 379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/2\", null, \"delete\" );\nexpect(response.status).to.equal(200);\nexpect(response.data).to.be.empty;",
              "err": {},
              "uuid": "a4cbfe55-1af1-40e9-a132-16a083969597",
              "parentUUID": "dc894843-acb2-46ce-a18f-9b7d23209eb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1da2477a-17f5-47b0-ac50-2aabb0872785",
            "bbd0fb3b-bac0-4975-a1b9-b5118b8a84f7",
            "358836c3-4375-42e4-b4b3-dbeca4fabded",
            "1c9d6967-f0e2-4221-81d0-24b77659fb8a",
            "73df787c-8470-4879-9cb0-b689bfd874a8",
            "a4cbfe55-1af1-40e9-a132-16a083969597"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2578,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f896f03a-2309-40d6-822c-c631847221da",
          "title": "CRUD negative scenarios",
          "fullFile": "D:\\JS Mentoring Program Mentee\\Mikhail_Lazko_Automation_Program_Basic\\specs\\test.spec.js",
          "file": "\\specs\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 404 when trying to post a new album inside and album",
              "fullTitle": "CRUD negative scenarios should return 404 when trying to post a new album inside and album",
              "timedOut": false,
              "duration": 379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/1\", albumsData, \"post\" );\nexpect(response.status).to.equal(404);",
              "err": {},
              "uuid": "00f062a3-3e4e-4009-8bba-a397a81c0e5c",
              "parentUUID": "f896f03a-2309-40d6-822c-c631847221da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when trying to get non-existing resource",
              "fullTitle": "CRUD negative scenarios should return 404 when trying to get non-existing resource",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/101\");\nexpect(response.status).to.equal(404);",
              "err": {},
              "uuid": "73efcfc3-066c-485c-b43f-e031f6b54faa",
              "parentUUID": "f896f03a-2309-40d6-822c-c631847221da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update albums id",
              "fullTitle": "CRUD negative scenarios should not update albums id",
              "timedOut": false,
              "duration": 370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums/100\", {\n  id: 1\n}, \"put\");\nexpect(response.data.id).to.equal(100);",
              "err": {},
              "uuid": "ee9d3cf4-e762-440f-b653-56cb465954c9",
              "parentUUID": "f896f03a-2309-40d6-822c-c631847221da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when trying to delete all albums",
              "fullTitle": "CRUD negative scenarios should return 404 when trying to delete all albums",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await sendRequest(\"albums\", null, \"delete\");\nexpect(response.status).to.equal(404);",
              "err": {},
              "uuid": "d57453b7-7b62-47ac-86d5-86bc238d10f8",
              "parentUUID": "f896f03a-2309-40d6-822c-c631847221da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00f062a3-3e4e-4009-8bba-a397a81c0e5c",
            "73efcfc3-066c-485c-b43f-e031f6b54faa",
            "ee9d3cf4-e762-440f-b653-56cb465954c9",
            "d57453b7-7b62-47ac-86d5-86bc238d10f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1475,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}